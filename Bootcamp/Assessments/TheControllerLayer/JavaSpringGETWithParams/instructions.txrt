Challenge: Spring Controller Part IV
Note that the Set Up is the same as the previous challenge but the specifications are not.

Set Up
In this application, there exists a Book class of the form:

@Entity
class Book {

  @Id 
  @NotNull
  private final Integer isbn;
  @NotNull
  private final String title;
  @NotNull
  private final String author;

  public Book(Integer isbn, String title, String author) {
      this.isbn = isbn;
      this.title = title;
      this.author = author;
  }

  public Integer getIsbn() {
      return isbn;
  }

  public String getTitle() {
      return title;
  }

  public String getAuthor() {
      return author;
  }
}
Note: You cannot see this class but it exists in the project

There also exists a BookRepository of the form:

@Repository
public interface BookRepository extends JpaRepository<Book, Integer> {
    List<Book> findByTitle(String title);
    List<Book> findByAuthor(String author);
    List<Book> findByTitleContaining(String title);
    Book findByIsbn(int isbn);
    Book findByTitleAndAuthor(String title, String author);
}
Note: You cannot see this Repository but it exists in the project

Specifications
Create a GET route with the path /books that takes a title and an author as query parameters (with those names).

Both query parameters must be optional.

The method parameters should be named optionalTitle and optionalAuthor to follow good practice in variable naming.

If neither parameter is present, return a list of all books and a 200 status.

If only the title is present, return a list of all books with a matching title and a 200 status.

If only the author is present, return a list of all books with a matching author and a 200 status.

If both title and author are present, return a list with the single book that matches the title and author and a 200 status.

It may be helpful to note the return type of each repository method